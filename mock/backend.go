// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/backend.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	internal "github.com/rpoletaev/newsreader/internal"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockStore) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockStoreMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStore)(nil).Init))
}

// Feeds mocks base method
func (m *MockStore) Feeds() internal.FeedsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feeds")
	ret0, _ := ret[0].(internal.FeedsRepository)
	return ret0
}

// Feeds indicates an expected call of Feeds
func (mr *MockStoreMockRecorder) Feeds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feeds", reflect.TypeOf((*MockStore)(nil).Feeds))
}

// Articles mocks base method
func (m *MockStore) Articles() internal.ArticlesRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Articles")
	ret0, _ := ret[0].(internal.ArticlesRepository)
	return ret0
}

// Articles indicates an expected call of Articles
func (mr *MockStoreMockRecorder) Articles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Articles", reflect.TypeOf((*MockStore)(nil).Articles))
}

// MockFeedsRepository is a mock of FeedsRepository interface
type MockFeedsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeedsRepositoryMockRecorder
}

// MockFeedsRepositoryMockRecorder is the mock recorder for MockFeedsRepository
type MockFeedsRepositoryMockRecorder struct {
	mock *MockFeedsRepository
}

// NewMockFeedsRepository creates a new mock instance
func NewMockFeedsRepository(ctrl *gomock.Controller) *MockFeedsRepository {
	mock := &MockFeedsRepository{ctrl: ctrl}
	mock.recorder = &MockFeedsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeedsRepository) EXPECT() *MockFeedsRepositoryMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockFeedsRepository) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockFeedsRepositoryMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockFeedsRepository)(nil).Init))
}

// New mocks base method
func (m *MockFeedsRepository) New(f internal.Feed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// New indicates an expected call of New
func (mr *MockFeedsRepositoryMockRecorder) New(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockFeedsRepository)(nil).New), f)
}

// Get mocks base method
func (m *MockFeedsRepository) Get(id uint) (*internal.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*internal.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFeedsRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFeedsRepository)(nil).Get), id)
}

// GetAll mocks base method
func (m *MockFeedsRepository) GetAll() ([]*internal.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*internal.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockFeedsRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFeedsRepository)(nil).GetAll))
}

// Delete mocks base method
func (m *MockFeedsRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFeedsRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFeedsRepository)(nil).Delete), id)
}

// MockArticlesRepository is a mock of ArticlesRepository interface
type MockArticlesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticlesRepositoryMockRecorder
}

// MockArticlesRepositoryMockRecorder is the mock recorder for MockArticlesRepository
type MockArticlesRepositoryMockRecorder struct {
	mock *MockArticlesRepository
}

// NewMockArticlesRepository creates a new mock instance
func NewMockArticlesRepository(ctrl *gomock.Controller) *MockArticlesRepository {
	mock := &MockArticlesRepository{ctrl: ctrl}
	mock.recorder = &MockArticlesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArticlesRepository) EXPECT() *MockArticlesRepositoryMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockArticlesRepository) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockArticlesRepositoryMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockArticlesRepository)(nil).Init))
}

// Get mocks base method
func (m *MockArticlesRepository) Get(id uint) (*internal.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*internal.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockArticlesRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArticlesRepository)(nil).Get), id)
}

// GetByFeed mocks base method
func (m *MockArticlesRepository) GetByFeed(id uint) ([]*internal.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFeed", id)
	ret0, _ := ret[0].([]*internal.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFeed indicates an expected call of GetByFeed
func (mr *MockArticlesRepositoryMockRecorder) GetByFeed(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFeed", reflect.TypeOf((*MockArticlesRepository)(nil).GetByFeed), id)
}

// Insert mocks base method
func (m *MockArticlesRepository) Insert(list ...internal.Article) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range list {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockArticlesRepositoryMockRecorder) Insert(list ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockArticlesRepository)(nil).Insert), list...)
}

// Delete mocks base method
func (m *MockArticlesRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockArticlesRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticlesRepository)(nil).Delete), id)
}
